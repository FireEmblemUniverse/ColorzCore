EAPROGRAM = [ LINE , { NEWLINE , LINE } ];

LINE = PREPROCESSOR_COMMAND | LABEL | STATEMENTS | BLOCK | NEWLINE;

BLOCK = OPEN_BRACE , [ LINE , { NEWLINE , LINE } ] , CLOSE_BRACE

PREPROCESSOR_COMMAND = HASH , IDENTIFIER , PARAM_LIST;

LABEL = INDENTIFIER , COLON;

STATEMENTS = STATEMENT , { SEMICOLON , STATEMENTS };
STATEMENT = MACRO , { PARAM } | RAW , { PARAM };
MACRO = IDENTIFIER , OPEN_PAREN , PARAM_LIST , CLOSE_PAREN; //Expands to the string with a matching number of parameters, in code (think python's exec()). Gets parsed as such immediately.
PARAM_LIST = PARAM , { COMMA , PARAM };
PARAM = ATOM | LIST | STRING;
RAW = IDENTIFIER;
LIST = OPEN_BRACKET , ATOM , { COMMA , ATOM } , CLOSE_BRACKET; //Shorthand for construction of a large int / series of ints?

ATOM = MATH_EXPR | IDENTIFIER | MACRO;
MATH_EXPR = PREC4 , MUL_OP , MATH_EXPR | PREC4 , DIV_OP , MATH_EXPR | PREC4;
PREC4 = PREC5 , ADD_OP , PREC4 | PREC5 , SUB_OP , PREC4 | PREC5
PREC5 = PREC8 , LSHIFT_OP , PREC5 | PREC8 , RSHIFT_OP , PREC5 | PREC8 , SIGNED_RSHIFT_OP , PREC5 | PREC8
PREC8 = PREC9 , AND_OP , PREC8 | PREC9
PREC9 = PREC10 , XOR_OP , PREC9 | PREC10
PREC10 = PREC11 , OR_OP , LITERAL | LITERAL
LITERAL = OPEN_PAREN , ATOM , CLOSE_PAREN | NUMBER
STRING = "\"" , STRING_ELEM , "\"";

NEWLINE = "\n";
SEMICOLON = ";";
COLON = ":"; 
COMMA = ",";
OPEN_BRACE = "{";
CLOSE_BRACE = "}";
OPEN_PAREN = "(";
CLOSE_PAREN = ")";
MUL_OP = "*";
DIV_OP = "/";
ADD_OP = "+";
SUB_OP = "_";
LSHIFT_OP = "<<";
RSHIFT_OP = ">>";
SIGNED_RSHIFT_OP = ">>>";
AND_OP = "&";
XOR_OP = "^";
OR_OP = "|";
HASH = "#";
NUMBER = [0-9]+ | HEXADECIMAL_PREFIX , [0-9]+;
HEXADECIMAL_PREFIX = "0x" | "$"
OPEN_BRACKET = "[";
CLOSE_BRACKET = "]";
QUOTE = "\"";
STRING_ELEM = (([^\\\"]|\\[rnt\\\"])*);
IDENTIFIER = [a-zA-Z_][a-zA-Z0-9_]*;
