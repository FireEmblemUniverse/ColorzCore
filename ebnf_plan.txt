EAPROGRAM = [ LINE , { NEWLINE , LINE } ];

LINE = PREPROCESSOR-COMMAND | LABEL | STATEMENTS;

PREPROCESSOR-COMMAND = "#" , IDENTIFIER , PARAM-LIST;

LABEL = INDENTIFIER , COLON;

STATEMENTS = STATEMENT , { SEMICOLON , STATEMENTS };
STATEMENT = MACRO | RAW , { PARAM };
MACRO = IDENTIFIER , OPEN-PAREN , PARAM-LIST , CLOSE-PAREN; //Expands to the string with a matching number of parameters, in code (think python's exec()). Gets parsed as such immediately.
PARAM-LIST = PARAM , { COMMA , PARAM };
PARAM = ATOM | LIST | STRING;
RAW = IDENTIFIER;
LIST = OPEN-BRACKET , ATOM , { COMMA , ATOM } , CLOSE-BRACKET; //Shorthand for construction of a large int / series of ints?

ATOM = MATH-EXPR | IDENTIFIER | MACRO;
MATH-EXPR = PREC4 , MUL-OP , MATH-EXPR | PREC4 , DIV-OP , MATH-EXPR | PREC4;
PREC4 = PREC5 , ADD-OP , PREC4 | PREC5 , SUB-OP , PREC4 | PREC5
PREC5 = PREC8 , LSHIFT-OP , PREC5 | PREC8 , RSHIFT-OP , PREC5 | PREC8
PREC8 = PREC9 , AND-OP , PREC8 | PREC9
PREC9 = PREC10 , XOR-OP , PREC9 | PREC10
PREC10 = PREC11 , OR-OP , LITERAL | LITERAL
LITERAL = OPEN-PAREN , ATOM , CLOSE-PAREN | NUMBER
STRING = QUOTE , STRING-ELEM , QUOTE;

NEWLINE = "\n";
SEMICOLON = ";";
COLON = ":"; 
OPEN-PAREN = "(";
CLOSE-PAREN = ")";
MUL-OP = "*";
DIV-OP = "/";
ADD-OP = "+";
SUB-OP = "-";
LSHIFT-OP = "<<";
RSHIFT-OP = ">>";
AND-OP = "&";
XOR-OP = "^";
OR-OP = "|";
NUMBER = [0-9]+ | \$[0-9]+ | 0x[0-9]+;
OPEN-BRACKET = "[";
CLOSE-BRACKET = "]";
QUOTE = "\"";
ESCAPE-CHAR = [trn\"\\]; //Might be missing some
STRING-ELEM = [^\"\\] | "\\" , ESCAPE-CHAR;
IDENTIFIER = [a-zA-Z][a-zA-Z0-9\_]*;
